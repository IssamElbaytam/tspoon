'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var fs = require('fs');
var path = require('path');
var isAbsolute = require('path-is-absolute');
var jade = require('jade');
var markdown = require('markdown-it');
var hljs = require('highlight.js');

var md = markdown({
  langPrefix: 'hljs ',
  highlight: function highlight(string, lang) {
    try {
      if (lang) {
        return hljs.highlight(lang, string).value;
      } else {
        return hljs.highlightAuto(code).value;
      }
    } catch (e) {
      console.error(e);
    }
    return '';
  }
});

var GitHubMarkdown = (function () {
  function GitHubMarkdown() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, GitHubMarkdown);

    this.file = config.file;
    this.title = config.title || path.basename(this.file);
    this.template = config.template || path.join(__dirname, '../template.jade');

    if (!isAbsolute(this.template)) {
      this.template = path.join(process.cwd(), this.config.template);
    }

    if (!fs.existsSync(this.file)) {
      throw new Error(this.file + ' does not exist');
    }

    if (!fs.statSync(this.file).isFile()) {
      throw new Error(this.file + ' is not a markdown file');
    }
  }

  _createClass(GitHubMarkdown, [{
    key: 'render',
    value: function render() {
      var _this = this;

      return new Promise(function (resolve, reject) {

        var string = fs.readFileSync(_this.file).toString();
        var html = md.render(string);

        var options = {
          pretty: true,
          title: _this.title,
          content: html
        };

        jade.renderFile(_this.template, options, function (error, html) {

          if (error) {
            reject(error);
          }

          resolve(html);
        });
      });
    }
  }]);

  return GitHubMarkdown;
})();

module.exports = GitHubMarkdown;