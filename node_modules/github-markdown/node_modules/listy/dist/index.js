'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _isGlob = require('is-glob');

var _isGlob2 = _interopRequireDefault(_isGlob);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var normalize = function normalize(value) {

  if (value == null) {
    return [];
  }

  var array = Array.isArray(value) ? value : [value];

  var compaction = function compaction(item) {
    return item != null;
  };
  var stringify = function stringify(item) {
    return item.toString();
  };

  return array.filter(compaction).map(stringify);
};

var listy = function listy(arg) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var paths = [];
  var strings = normalize(arg);
  var push = Array.prototype.push;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = strings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var string = _step.value;

      if ((0, _isGlob2.default)(string)) {
        push.apply(paths, _glob2.default.sync(string));
        continue;
      }

      if (!_fs2.default.existsSync(string)) {
        continue;
      }

      var fi = _fs2.default.statSync(string);

      if (fi.isFile()) {
        paths.push(_path2.default.resolve(string));
      } else if (fi.isDirectory()) {
        push.apply(paths, _fs2.default.readdirSync(string));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (options.ext) {
    paths = paths.filter(function (item) {
      return _path2.default.extname(item) === options.ext;
    });
  }

  if (typeof options.filter === 'function') {
    paths = paths.filter(function (item) {
      return options.filter(item);
    });
  }

  return paths;
};

module.exports = function (arg, options) {
  return Promise.resolve(listy(arg, options));
};

module.exports.sync = listy;